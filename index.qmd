---
title: "Diversify your career with Shiny for Python"
format: 
    revealjs:
        incremental: true
        theme: league
editor: 
    render-on-save: true
---

# Career mistakes

::: {.notes}
- Hired to build shiny apps and improve R code
- Socure switched to Python
- Question of whether I could build Python tools
- Why didn't I have confidence in Python development?
:::

## "Learn Python" is a terrible goal

- What does it mean?
- When are you done?
- What value does it provide?
- How do you prove it?

## It's hard to learn substitutes

- R and Python do very similar things
- Close enough that you feel like you should know it
- Far enough away that you don't

## Value based learning {.center}
Learn things that:

* Provide real value
* Really quickly

## {.center}

1) It gives you something you don't have
2) It's better than other Python frameworks
3) You already know it

# What do you get?

## Much easier deployment

- Undeployed apps are worthless
- R deployments are fraught
    - "Devops doesn't know R"
    - "Will this scale?"
    - "What happens if you leave?"
- Shiny for Python doesn't have these problems

## Easier integration
- Reticulate is great but... 
    - Wrapping python inside of R is hard
    - Not everything works
    - Environments can be challenging
    - Hard to get help 
- One language is simpler

## Proves you know Python
- Creates an artifact
- Demonstrates value
- Better than what they've seen before

# Shiny is better

## What makes Shiny Special?
- Programmatic range
- Prototypes smoothly grow into products
- You don't need to hire anyone

# The competition

## Streamlit
- Optimized for very simple applications
- Runs entire script from top-to-bottom every time
- Complex apps are not possible
- Simple things are oddly difficult:
    - Updating a slider?
    - Changing a button color?

## Dash
- Stateless applications
- Components can't really share data
- Imagine Shiny without reactive expressions
- Solves a problem which you probably don't have

## Django/Flask/FastAPI
- Great for large apps
- Fairly steep learning curve
- You need to write your own front-end

# You already know Shiny for Python

## Knowledge is transferrable
- Both libraries are clients to the same framework
- Most of what you know from R Shiny is transferrable
    - How reactivity works
    - When to use reactives vs observers
    - When to use a module
    - How to style Shiny applications
- ChatGPT can fill in the rest

## Value based learning
- Provides you value 
    - Adds integration options
- Provides your employer value
    - Does things that other frameworks can't do
- Fast time-to-value
    - You're already an expert

## Get involved
- Join the Discord
- Port an R shiny extension
- Book a webinar with us

# Thank you!

https://shiny.rstudio.com/py/
